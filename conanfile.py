from conans import ConanFile, CMake, tools, __version__ as conan_version
from conans.model.version import Version
from conans.client.build.cppstd_flags import cppstd_default

from conans.tools import download, unzip
import os, re

class CeresSolverConan(ConanFile):
    name = "ceres-solver"
    version = "2.0.0"
    license = "New BSD"
    url = "https://github.com/ceres-solver/ceres-solver/"
    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake_paths"
    requires = "eigen/3.3.7@conan/stable", "glog/0.4.0@bincrafters/stable", "gflags/2.2.2@bincrafters/stable"
    build_policy    = 'missing'
    exports_sources = "ceres-solver.patch"
    options         = {
        'shared'  : [True, False],
        'examples': [True, False],
        'fPIC':   [True, False],
        'suitesparse': [True, False],
        'cxsparse':    [True, False],
        'blas':        ['openblas', 'blas', 'custom', 'system'], # System basically doesn't do anything which should search system paths
        'cppstd':      [11,14,17],
    }
    default_options = (
        'shared=False',
        'examples=False',
        'fPIC=True',
        'suitesparse=False',
        'cxsparse=False',
        'blas=custom',
        'cppstd=11'
    )


    def source(self):
        git = tools.Git(folder="ceres-solver-"+self.version)
        git.clone("https://github.com/ceres-solver/ceres-solver.git")
        git.checkout("edb8322bdabef336db290be1cc557145b6d4bf80")
        self.run("cd ceres-solver-" +self.version + " && git status")
        # git.patch("ceres-solver.patch")
        tools.patch(base_path="ceres-solver-"+self.version, patch_file="ceres-solver.patch")
        # 47e784bb4146da52d3b0695877326d60c36ab189 worked
        # edb8322bdabef336db290be1cc557145b6d4bf80 newest (dec 2019)
    def configure(self):
        if conan_version >= Version("1.21.0"):
            if(not tools.valid_min_cppstd(self,self.options.cppstd)):
                cppstd = self.settings.get_safe("compiler.cppstd")
                if cppstd:
                    self.options.cppstd = cppstd
                    tools.check_min_cppstd(self, self.options.cppstd)
                else:
                    compiler = self.settings.get_safe("compiler")
                    compiler_version = self.settings.get_safe("compiler.version")
                    return cppstd_default(compiler, compiler_version)



    def build(self):
        cmake = CMake(self)
        cmake.definitions["CMAKE_TOOLCHAIN_FILE"] = "conan_paths.cmake" #generated by cmake_path generator
        cmake.definitions["BUILD_TESTING"] = False
        cmake.definitions["BUILD_EXAMPLES"] = True if self.options.examples else False
        cmake.definitions["BUILD_SHARED_LIBS"] = False
        cmake.definitions["SUITESPARSE"] = True if self.options.suitesparse else False
        cmake.definitions["CXSPARSE"] = False
        cmake.definitions["SCHUR_SPECIALIZATIONS"] = False
        cmake.definitions["CUSTOM_BLAS"] = True if self.options.blas == "custom" else False
        cmake.definitions['NO_CMAKE_PACKAGE_REGISTRY'] = True
        cmake.definitions['EIGEN_INCLUDE_DIR:PATH'] = os.path.join(self.deps_cpp_info['eigen'].rootpath, 'include', 'eigen3')
        cmake.definitions['EIGEN_INCLUDE_DIR_HINTS:PATH'] = os.path.join(self.deps_cpp_info['eigen'].rootpath, 'include', 'eigen3')
        cmake.definitions['Eigen3_DIR:PATH'] =  os.path.join(self.deps_cpp_info['eigen'].rootpath, 'share', 'eigen3', 'cmake')
        cmake.definitions['EIGEN3_INCLUDE_DIR:PATH'] =  os.path.join(self.deps_cpp_info['eigen'].rootpath, 'include', 'eigen3')
        cmake.definitions['EIGEN3_ROOT:PATH'] =  os.path.join(self.deps_cpp_info['eigen'].rootpath, 'include')
        cmake.definitions['GFLAGS_INCLUDE_DIR:PATH'] = os.path.join(self.deps_cpp_info['gflags'].rootpath, 'include')
        cmake.definitions['GFLAGS_LIBRARY:PATH'] = os.path.join(self.deps_cpp_info['gflags'].rootpath, 'lib')
        cmake.definitions['GLOG_INCLUDE_DIR:PATH'] = os.path.join(self.deps_cpp_info['glog'].rootpath, 'include')
        cmake.definitions['GLOG_LIBRARY:PATH'] = os.path.join(self.deps_cpp_info['glog'].rootpath, 'lib')
        cmake.definitions['CMAKE_CXX_STANDARD'] = self.options.cppstd
        if 'fPIC' in self.options and self.options.fPIC:
            cmake.definitions['CMAKE_POSITION_INDEPENDENT_CODE'] = 'ON'

        if tools.os_info.is_linux:
            cmake.definitions['BUILD_SHARED_LIBS:BOOL'] = True if self.options.shared else False

        cmake.configure( source_folder=self.build_folder+'/ceres-solver-'+self.version )
        cmake.build()
        cmake.install()

    def package_info(self):
        self.cpp_info.libs = tools.collect_libs(self)
        if not self.cpp_info.libs:
            raise Exception("No libs collected")
